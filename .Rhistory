}
# decoding data
for (j in 1:5)
spring[, j]=as.numeric(coded(spring[, j]))
# defining fraction
fraction <- with(spring, spring[A * B * C * D * E == 1,])
# linear regression
summary(lm(as.numeric(FH) ~ A * B * C * D * E, fraction))
# alias structure
alias(lm(as.numeric(FH) ~ A * B * C * D * E, fraction))
View(fraction.chem)
A <- rep(x = c("-", "+"), times = 8)
B <- rep(x = c("-", "+"), each = 2, times = 4)
C <- rep(x = c("-", "+"), each = 4, times = 2)
D <- c("-", "+", "+", "-", "+", "-", "-", "+", "-", "+", "+", "-", "+", "-", "-", "+")
E <- rep(x = c("-", "+"), each = 8)
spring.test = data.frame(A,B,C,D,E,FH1)
coded=function(x)
{
ifelse(x=="+", 1, -1)
}
# decoding data
for (j in 1:5)
spring[, j]=as.numeric(coded(spring[, j]))
View(spring)
A <- rep(x = c("-", "+"), times = 8)
B <- rep(x = c("-", "+"), each = 2, times = 4)
C <- rep(x = c("-", "+"), each = 4, times = 2)
D <- c("-", "+", "+", "-", "+", "-", "-", "+", "-", "+", "+", "-", "+", "-", "-", "+")
E <- rep(x = c("-", "+"), each = 8)
FH1 <- c(7.78, 8.15, 7.5, 7.59, 7.54, 7.69, 7.56, 7.56, 7.5, 7.88, 7.5, 7.63, 7.32, 7.56, 7.18, 7.81)
FH2 <- c(7.78, 8.18, 7.56, 7.56, 8, 8.09, 7.52, 7.81, 7.25, 7.88, 7.56, 7.75, 7.44, 7.69, 7.18, 7.5)
FH3 <- c(7.81, 7.88, 7.5, 7.75, 7.88, 8.06, 7.44, 7.69, 7.12, 7.44, 7.5, 7.56, 7.44, 7.62, 7.25, 7.59)
# creating table
A <- c(A, A, A)
B <- c(B, B, B)
C <- c(C, C, C)
D <- c(D, D, D)
E <- c(E, E, E)
FH <- as.numeric(c(FH1, FH2, FH3))
spring <- data.frame(cbind(A, B, C, D, E, FH))
# defining coded
coded=function(x)
{
ifelse(x=="+", 1, -1)
}
# decoding data
for (j in 1:5)
spring[, j]=as.numeric(coded(spring[, j]))
# defining fraction
fraction <- with(spring, spring[A * B * C * D * E == 1,])
# linear regression
summary(lm(as.numeric(FH) ~ A * B * C * D * E, fraction))
# alias structure
# alias structure
alias(lm(as.numeric(FH) ~ A * B * C * D * E, fraction))
# declaring data
A <- rep(x = c("-", "+"), times = 8)
B <- rep(x = c("-", "+"), each = 2, times = 4)
C <- rep(x = c("-", "+"), each = 4, times = 2)
D <- c("-", "+", "+", "-", "+", "-", "-", "+", "-", "+", "+", "-", "+", "-", "-", "+")
E <- rep(x = c("-", "+"), each = 8)
FH1 <- c(7.78, 8.15, 7.5, 7.59, 7.54, 7.69, 7.56, 7.56, 7.5, 7.88, 7.5, 7.63, 7.32, 7.56, 7.18, 7.81)
FH2 <- c(7.78, 8.18, 7.56, 7.56, 8, 8.09, 7.52, 7.81, 7.25, 7.88, 7.56, 7.75, 7.44, 7.69, 7.18, 7.5)
FH3 <- c(7.81, 7.88, 7.5, 7.75, 7.88, 8.06, 7.44, 7.69, 7.12, 7.44, 7.5, 7.56, 7.44, 7.62, 7.25, 7.59)
# creating table
A <- c(A, A, A)
B <- c(B, B, B)
C <- c(C, C, C)
D <- c(D, D, D)
E <- c(E, E, E)
FH <- as.numeric(c(FH1, FH2, FH3))
spring <- data.frame(cbind(A, B, C, D, E, FH))
# defining coded
coded=function(x)
{
ifelse(x=="+", 1, -1)
}
# decoding data
for (j in 1:5)
spring[, j]=as.numeric(coded(spring[, j]))
# defining fraction
#fraction <- with(spring, spring[A * B * C * D * E == 1,])
# linear regression
summary(lm(as.numeric(FH) ~ A * B * C * D * E, spring))
# alias structure
alias(lm(as.numeric(FH) ~ A * B * C * D * E, spring))
yield = c(7,9,34,55,16,20,40,60,8,10,32,50,18,21,44,61,8,12,35,52,15,22,45,65,6,10,30,53,15,20,41,63)
A <- rep(x = c("-", "+"), times = 16)
B <- rep(x = c("-", "+"), each = 2, times = 8)
C <- rep(x = c("-", "+"), each = 4, times = 4)
D <- rep(x = c("-", "+"), each = 8, times = 2)
E <- rep(x = c("-", "+"), each = 16)
experimento = data.frame(A,B,C,D,E,yield)
coded=function(x) #a function to code variable x
{
ifelse(x=="+", 1, -1)
}
for (j in 1:5)
experimento[, j]=as.numeric(coded(experimento[, j]))
fraction.experi=with(experimento, experimento[A * B * C * D * E== 1,])
#linear model
experi.lm = lm(yield ~ A*B*C*D*E, fraction.experi); summary(experi.lm)
#alias
alias(experi.lm)
#normal probabiliy plot
qqnorm(aov(yield ~ A * B * C * D * E, fraction.experi), label = TRUE)
library(gplots)
#normal probabiliy plot
qqnorm(aov(yield ~ A * B * C * D * E, fraction.experi), label = TRUE)
#new linear model
experi.lm2 = lm(yield ~ A + B + C + A*B, fraction.experi); summary(experi.lm2)
res = fraction.experi$yield - fitted(experi.lm2)
plot(fitted(experi.lm2), res)
qqplot(res)
library(car)
qqplot(res)
library(cars)
library(car)
qqPlot(res)
plot(fitted(experi.lm2), res)
#chemical data from 6.7
rep1 = c(90,74,81,83,77,81,88,73,98,72,87,85,99,79,87,80)
#rep2 = c(93,78,85,80,78,80,82,70,95,76,83,86,90,75,84,80)
A <- rep(x = c("-", "+"), times = 8)
B <- rep(x = c("-", "+"), each = 2, times = 4)
C <- rep(x = c("-", "+"), each = 4, times = 2)
D <- rep(x = c("-", "+"), each = 8)
#data
chemical = data.frame(A,B,C,D,rep1)
coded=function(x) #a function to code variable x
{
ifelse(x=="+", 1, -1)
}
for (j in 1:4)
chemical[, j]=as.numeric(coded(chemical[, j]))
fraction.chem=with(chemical, chemical[A * B * C * D == 1,])
#linear model
chem.lm = lm(rep1 ~ A*B*C*D, fraction.chem); summary(chem.lm)
#alias
alias(chem.lm)
#normal probability plot
qqnorm(aov(rep1 ~ A * B * C * D, fraction.chem), label = TRUE)
qqnorm(aov(rep1 ~ A * B * C * D, fraction.chem), label = TRUE)
#refine model
chem.lm2 = lm(rep1 ~ A + B + C + A*B + B*C, fraction.chem); summary(chem.lm2)
res = fraction.chem$rep1 - fitted(chem.lm2)
qqplot(res)
plot(fitted(chem.lm2), res)
qqPlot(res)
#############################################
##     analysis of the one-half fraction    #
#############################################
#recode the data: x=1 at level +; X=-1 at level -
coded=function(x) #a function to code variable x
{
ifelse(x=="+", 1, -1)
}
#filtration rate data (eg. 8.1 page 325)
filtration=read.table("C:/Users/Emmanuel/Desktop/SPRING 2018/MATH 447/Chapter 8/filtration.txt", header = TRUE)
#alias
alias(chem.lm)
for (j in 1:4)
filtration[, j]=as.numeric(coded(filtration[, j]))
coded=function(x) #a function to code variable x
{
ifelse(x=="+", 1, -1)
}
#filtration rate data (eg. 8.1 page 325)
filtration=read.table("C:/Users/Emmanuel/Desktop/SPRING 2018/MATH 447/Chapter 8/filtration.txt", header = TRUE)
for (j in 1:4)
filtration[, j]=as.numeric(coded(filtration[, j]))
#2^(4-1) with I=ABCD (Resolution IV)
fraction=with(filtration, filtration[A * B * C * D == 1,])
summary(lm(Rate ~ A * B * C * D, fraction))
#Alias structure
alias(lm(Rate ~ A * B * C * D, fraction))
qqnorm(aov(Rate ~ A * B * C * D, fraction), label = TRUE)
qqnorm(aov(Rate ~ A * B * C * D, fraction), label = TRUE)
#linear model
chem.lm = lm(rep1 ~ A*B*C*D, fraction.chem); summary(chem.lm)
#normal probability plot
qqnorm(aov(rep1 ~ A * B * C * D, fraction.chem), label = TRUE)#A, C, AB, BC
qqnorm(aov(rep1 ~ A * B * C * D, fraction.chem), label = TRUE)#A, C, AB, BC
qqnorm(aov(rep1 ~ A * B * C * D, fraction.chem), label = TRUE)#A, C, AB, BC
chem.lm2 = lm(rep1 ~ A*B + A*D, fraction.chem); summary(chem.lm2)
res = fraction.chem$rep1 - fitted(chem.lm2)
qqPlot(res)
plot(fitted(chem.lm2), res)
#normal probabiliy plot
qqnorm(aov(yield ~ A * B * C * D * E, fraction.experi), label = TRUE)# A,B,C, and AB
G <- c("+","+",rep(x =c("-","+"), each = 4), "+","+")
A <- rep(x = c("-", "+"), times = 8)
B <- rep(x = c("-", "+"), each = 2, times = 4)
C <- rep(x = c("-", "+"), each = 4, times = 2)
D <- rep(x = c("-", "+"), each = 8)
E <- c("+","+","+","+","-","-","-","-","-","-","-","-","+","+","+","+")
F <- c("+","+","-","-","+","+","-","-","-","-","+","+","-","-","+","+")
G <- c("+","+",rep(x =c("-","+"), each = 4), rep(x =c("-"), each = 4),"+","+")
#data
hardata = data.frame(A,B,C,D,E,F,G)
View(hardata)
A <- rep(x = c("-", "+"), times = 8)
B <- rep(x = c("-", "+"), each = 2, times = 4)
C <- rep(x = c("-", "+"), each = 4, times = 2)
D <- rep(x = c("-", "+"), each = 8)
E <- c("+","+","+","+","-","-","-","-","-","-","-","-","+","+","+","+")
F <- c("+","+","-","-","+","+","-","-","-","-","+","+","-","-","+","+")
G <- c("+","+",rep(x =c("-","+"), each = 4), rep(x =c("-"), each = 4),"+","+")
H <- c("+","-","+","-","-","+","-","+","+","-","+","-","-","+","-","+")
J <- c("+","-","-","+","+","-","-","+","+","-","-","+","+","-","-","+")
K <- c("-","+","+","-","+","-","-","+","-","+","+","-","+","-","-","+")
FTMOD <- c(1.363,1.555,1.417,1.076,1.363,1.363,1.123,1.259,0.968,1.083,1.556,1.242,1.363,1.130,1.160,1.356)
#data
hardata = data.frame(A,B,C,D,E,F,G,H,J,K,FTMOD)
coded=function(x) #a function to code variable x
{
ifelse(x=="+", 1, -1)
}
for (j in 1:10)
hardata[, j]=as.numeric(coded(hardata[, j]))
#linear regression
hardata.lm <- lm(FTMOD ~ A*B*C*D*E*F*G*H*J*K, hardata)
#alias
alias(hardata.lm)
fraction.hardata=with(hardata, hardata[A * B * C * D * E * F * G * H * J * K== 1,])
#linear regression
hardata.lm <- lm(FTMOD ~ A*B*C*D*E*F*G*H*J*K, hardata)
#alias
alias(hardata.lm)
qqnorm(aov(FTMOD ~ A*B*C*D*E*F*G*H*J*K, hardata))
qqnorm(aov(FTMOD ~ A*B*C*D*E*F*G*H*J*K, hardata), header = TRUE)
qqnorm(aov(FTMOD ~ A*B*C*D*E*F*G*H*J*K, hardata), label = TRUE)
hardata.lm2 <- lm(FTMOD ~ F * K, fraction.hardata); summary(hardata.lm2)
#residual analysis
res <- fraction.hardata$FTMOD - fitted(hardata.lm2)
qqplot(res)
plot(fitted(hardata.lm2, res))
qqPlot(res)
plot(fitted(hardata.lm2, res))
# declaring data
A <- rep(x = c("-", "+"), times = 8)
B <- rep(x = c("-", "+"), each = 2, times = 4)
C <- rep(x = c("-", "+"), each = 4, times = 2)
D <- c("-", "+", "+", "-", "+", "-", "-", "+", "-", "+", "+", "-", "+", "-", "-", "+")
E <- rep(x = c("-", "+"), each = 8)
FH1 <- c(7.78, 8.15, 7.5, 7.59, 7.54, 7.69, 7.56, 7.56, 7.5, 7.88, 7.5, 7.63, 7.32, 7.56, 7.18, 7.81)
FH2 <- c(7.78, 8.18, 7.56, 7.56, 8, 8.09, 7.52, 7.81, 7.25, 7.88, 7.56, 7.75, 7.44, 7.69, 7.18, 7.5)
FH3 <- c(7.81, 7.88, 7.5, 7.75, 7.88, 8.06, 7.44, 7.69, 7.12, 7.44, 7.5, 7.56, 7.44, 7.62, 7.25, 7.59)
# creating table
A <- c(A, A, A)
B <- c(B, B, B)
C <- c(C, C, C)
D <- c(D, D, D)
E <- c(E, E, E)
FH <- as.numeric(c(FH1, FH2, FH3))
spring <- data.frame(cbind(A, B, C, D, E, FH))
# defining coded
coded=function(x)
{
ifelse(x=="+", 1, -1)
}
# decoding data
for (j in 1:5)
spring[, j]=as.numeric(coded(spring[, j]))
#Interaction plot with main effect
with(spring, interaction.plot(A, B, Shrinkage))
#############################################
##     analysis of the one-quarter fraction #
#############################################
#injection example (eg8.4, pp. 336)
#2^(6-2) runs
#defining relations: I=ABCE=BCDF=ADEF
injection=read.table("C:/Users/Emmanuel/Desktop/SPRING 2018/MATH 447/Chapter 8/injection.txt", header = TRUE)
for (j in 1:(ncol(injection) - 1))
injection[ , j]=coded(injection[ , j])
injection.lm=lm(Shrinkage ~ A * B * C * D * E * F, injection)
summary(injection.lm)
#Half-normal plot
qqnorm(aov(Shrinkage ~ A * B * C * D * E * F, injection), label = TRUE)
library(car)
library(gplots)
#Half-normal plot
qqnorm(aov(Shrinkage ~ A * B * C * D * E * F, injection), label = TRUE)
View(injection)
#Interaction plot with main effect
with(spring, interaction.plot(A, B, FH))
with(spring, tapply(FH,A,mean))
#Half Normal Probability Plot
qqnorm(aov(FH ~ A*B*C*D*E))
#Half Normal Probability Plot
qqnorm(aov(FH ~ A*B*C*D*E, spring))
#Half Normal Probability Plot
qqnorm(aov(FH ~ A*B*C*D*E, spring), label = TRUE)
#Half Normal Probability Plot
qqnorm(aov(FH ~ A*B*C*D*E, spring), label = TRUE)
# decoding data
for (j in 1:5)
spring[, j]=as.numeric(coded(spring[, j]))
#Half Normal Probability Plot
qqnorm(aov(FH ~ A*B*C*D*E, spring), label = TRUE)
# declaring data
A <- rep(x = c("-", "+"), times = 8)
# declaring data
A <- rep(x = c("-", "+"), times = 8)
B <- rep(x = c("-", "+"), each = 2, times = 4)
C <- rep(x = c("-", "+"), each = 4, times = 2)
D <- c("-", "+", "+", "-", "+", "-", "-", "+", "-", "+", "+", "-", "+", "-", "-", "+")
E <- rep(x = c("-", "+"), each = 8)
FH1 <- c(7.78, 8.15, 7.5, 7.59, 7.54, 7.69, 7.56, 7.56, 7.5, 7.88, 7.5, 7.63, 7.32, 7.56, 7.18, 7.81)
FH2 <- c(7.78, 8.18, 7.56, 7.56, 8, 8.09, 7.52, 7.81, 7.25, 7.88, 7.56, 7.75, 7.44, 7.69, 7.18, 7.5)
FH3 <- c(7.81, 7.88, 7.5, 7.75, 7.88, 8.06, 7.44, 7.69, 7.12, 7.44, 7.5, 7.56, 7.44, 7.62, 7.25, 7.59)
# creating table
A <- c(A, A, A)
B <- c(B, B, B)
C <- c(C, C, C)
D <- c(D, D, D)
E <- c(E, E, E)
FH <- as.numeric(c(FH1, FH2, FH3))
spring <- data.frame(cbind(A, B, C, D, E, FH))
# defining coded
coded=function(x)
{
ifelse(x=="+", 1, -1)
}
# decoding data
for (j in 1:5)
spring[, j]=as.numeric(coded(spring[, j]))
#Half Normal Probability Plot
qqnorm(aov(FH ~ A*B*C*D*E, spring), label = TRUE)
View(spring)
View(injection)
#Half Normal Probability Plot
qqnorm(aov(as.numeric(FH) ~ A*B*C*D*E, spring), label = TRUE)
#Interaction plot with main effect
with(spring, interaction.plot(B, E, as.numeric(FH)))
with(spring, tapply(as.numeric(FH),A,mean))
with(spring, tapply(as.numeric(FH),B,mean))
with(spring, tapply(as.numeric(FH),B,mean))
with(spring, tapply(as.numeric(FH),E,mean))
#Interaction plot with main effect
with(spring, interaction.plot(B, E, as.numeric(FH)))
with(spring, tapply(as.numeric(FH),B,mean))
#Interaction plot with main effect
with(spring, interaction.plot(B, E, as.numeric(FH)))
with(spring, tapply(as.numeric(FH),B,mean))
with(spring, tapply(as.numeric(FH),E,mean))
#interaction plot and main effect
with(injection, interaction.plot(A, B, Shrinkage))
with(injection, tapply(Shrinkage,A,mean))
with(injection, tapply(Shrinkage,B,mean))
#Interaction plot with main effect
with(spring, interaction.plot(A, E, as.numeric(FH)))
#Interaction plot with main effect
with(spring, interaction.plot(A, E, as.numeric(FH)))
with(spring, interaction.plot(B, E, as.numeric(FH)))
with(spring, interaction.plot(C, E, as.numeric(FH)))
with(spring, interaction.plot(D, E, as.numeric(FH)))
#interaction plot and main effect
with(injection, interaction.plot(A, B, Shrinkage))
with(injection, tapply(Shrinkage,A,mean))
with(injection, tapply(Shrinkage,B,mean))
#filtration rate data (eg. 8.1 page 325)
filtration=read.table("C:/Users/Emmanuel/Desktop/SPRING 2018/MATH 447/Chapter 8/filtration.txt", header = TRUE)
for (j in 1:4)
filtration[, j]=as.numeric(coded(filtration[, j]))
#2^(4-1) with I=ABCD (Resolution IV)
fraction=with(filtration, filtration[A * B * C * D == 1,])
summary(lm(Rate ~ A * B * C * D, fraction))
#Alias structure
alias(lm(Rate ~ A * B * C * D, fraction))
#Half-normal plot
library(gplots)
qqnorm(aov(Rate ~ A * B * C * D, fraction), label = TRUE)
#refined model
summary(lm(Rate ~ A * C + A * D, fraction))
#############################################
##     analysis of the one-quarter fraction #
#############################################
#injection example (eg8.4, pp. 336)
#2^(6-2) runs
#defining relations: I=ABCE=BCDF=ADEF
injection=read.table("C:/Users/Emmanuel/Desktop/SPRING 2018/MATH 447/Chapter 8/injection.txt", header = TRUE)
for (j in 1:(ncol(injection) - 1))
injection[ , j]=coded(injection[ , j])
injection.lm=lm(Shrinkage ~ A * B * C * D * E * F, injection)
summary(injection.lm)
#Half-normal plot
qqnorm(aov(Shrinkage ~ A * B * C * D * E * F, injection), label = TRUE)#A, B, AB
#interaction plot and main effect
with(injection, interaction.plot(A, B, Shrinkage))
#Interaction plot with main effect
with(spring, interaction.plot(B, E, as.numeric(FH)))
with(spring, interaction.plot(A, E, as.numeric(FH)))
#Interaction plot with main effect
with(spring, interaction.plot(E, B, as.numeric(FH)))#plots indicates that B=1, E=1
with(spring, interaction.plot(A, E, as.numeric(FH), xlab = "quench oil temperature"))#plots indicates that A=1, E=1
#Interaction plot with main effect
with(spring, interaction.plot(E, B, as.numeric(FH), xlab = "Quench Oil Temperature",
ylab = "Free Height", main = "Interaction Plot of E and B"))#plots indicates that B=1, E=1
#interaction plot and main effect
with(injection, interaction.plot(A, B, Shrinkage))
with(injection, tapply(Shrinkage,A,mean))
with(injection, tapply(Shrinkage,B,mean))
#Interaction plot with main effect
with(spring, interaction.plot(E, B, as.numeric(FH), xlab = "Quench Oil Temperature",
ylab = "Free Height", main = "Interaction Plot of E and B"))
#plots indicates that B=-1, E=-1
with(spring, interaction.plot(E, A, as.numeric(FH), xlab = "Quench Oil Temperature",
ylab = "Free Height", main = "Interaction Plot of E and A"))
#plots indicates that A=1, E=-1
with(spring, interaction.plot(E, C, as.numeric(FH), xlab = "Quench Oil Temperature",
ylab = "Free Height", main = "Interaction Plot of E and C"))
#plots indicates that C=-1, E=-1
with(spring, interaction.plot(E, D, as.numeric(FH), xlab = "Quench Oil Temperature",
ylab = "Free Height", main = "Interaction Plot of E and D"))
##mean
with(spring, tapply(as.numeric(FH),B,mean))
with(spring, tapply(as.numeric(FH),E,mean))
with(spring, tapply(as.numeric(FH),A,mean))
with(spring, tapply(as.numeric(FH),C,mean))
with(spring, tapply(as.numeric(FH),D,mean))
A <- rep(x = c("-", "+"), times = 8)
B <- rep(x = c("-", "+"), each = 2, times = 4)
C <- rep(x = c("-", "+"), each = 4, times = 2)
D <- rep(x = c("-", "+"), each = 8)
E <- c("+","+","+","+","-","-","-","-","-","-","-","-","+","+","+","+")
F <- c("+","+","-","-","+","+","-","-","-","-","+","+","-","-","+","+")
G <- c("+","+",rep(x =c("-","+"), each = 4), rep(x =c("-"), each = 4),"+","+")
H <- c("+","-","+","-","-","+","-","+","+","-","+","-","-","+","-","+")
J <- c("+","-","-","+","+","-","-","+","+","-","-","+","+","-","-","+")
K <- c("-","+","+","-","+","-","-","+","-","+","+","-","+","-","-","+")
FTMOD <- c(1.363,1.555,1.417,1.076,1.363,1.363,1.123,1.259,0.968,1.083,1.556,1.242,1.363,1.130,1.160,1.356)
#data
hardata = data.frame(A,B,C,D,E,F,G,H,J,K,FTMOD)
View(hardata)
coded=function(x) #a function to code variable x
{
ifelse(x=="+", 1, -1)
}
for (j in 1:10)
hardata[, j]=as.numeric(coded(hardata[, j]))
fraction.hardata=with(hardata, hardata[A * B * C * D * E * F * G * H * J * K== 1,])
#linear regression
hardata.lm <- lm(FTMOD ~ A*B*C*D*E*F*G*H*J*K, fraction.hardata)
#alias
alias(hardata.lm)
qqnorm(aov(FTMOD ~ A*B*C*D*E*F*G*H*J*K, fraction.hardata), label = TRUE)#K and F
FTMOD <- c(7.52,4.18,1.57,2.12,1.87,2.12,1.87,2.12,7.12,1.57,1.21,0.50,1.87,3.54,1.87,2.12,0.5,0.5)
FTMOD <- c(7.52,4.18,1.57,2.12,1.87,2.12,7.12,1.57,1.21,0.50,1.87,3.54,1.87,2.12,0.50,0.50)
A <- rep(x = c("-", "+"), times = 8)
B <- rep(x = c("-", "+"), each = 2, times = 4)
C <- rep(x = c("-", "+"), each = 4, times = 2)
D <- rep(x = c("-", "+"), each = 8)
E <- c("+","+","-","-","+","+","-","-","-","-","+","+","-","-","+","+")
F <- c("-","-","+","+","+","+","-","-","+","+","-","-","-","-","+","+")
G <- c("+","-","+","-","-","+","-","+","+","-","+","-","-","+","-","+")
H <- c("-","+","-","+","+","-","+","-","+","-","+","-","-","+","-","+")
J <- c("+","-","-","+","+","-","-","+","+","-","-","+","+","-","-","+")
FTMOD <- c(7.52,4.18,1.57,2.12,1.87,2.12,7.12,1.57,1.21,0.50,1.87,3.54,1.87,2.12,0.50,0.50)
#data
hardata = data.frame(A,B,C,D,E,F,G,H,J,K,FTMOD)
coded=function(x) #a function to code variable x
{
ifelse(x=="+", 1, -1)
}
for (j in 1:10)
for (j in 1:9)
for (j in 1:9)
hardata[, j]=as.numeric(coded(hardata[, j]))
fraction.hardata=with(hardata, hardata[A * B * C * D * E * F * G * H * J * K== 1,])
fraction.hardata=with(hardata, hardata[A * B * C * D * E * F * G * H * J== 1,])
#linear regression
hardata.lm <- lm(FTMOD ~ A*B*C*D*E*F*G*H*J, fraction.hardata)
A <- rep(x = c("-", "+"), times = 8)
B <- rep(x = c("-", "+"), each = 2, times = 4)
C <- rep(x = c("-", "+"), each = 4, times = 2)
D <- rep(x = c("-", "+"), each = 8)
E <- c("+","+","-","-","+","+","-","-","-","-","+","+","-","-","+","+")
F <- c("-","-","+","+","+","+","-","-","+","+","-","-","-","-","+","+")
G <- c("+","-","+","-","-","+","-","+","+","-","+","-","-","+","-","+")
H <- c("-","+","-","+","+","-","+","-","+","-","+","-","-","+","-","+")
J <- c("+","-","-","+","+","-","-","+","+","-","-","+","+","-","-","+")
FTMOD <- c(7.52,4.18,1.57,2.12,1.87,2.12,7.12,1.57,1.21,0.50,1.87,3.54,1.87,2.12,0.50,0.50)
#data
hardata = data.frame(A,B,C,D,E,F,G,H,J,K,FTMOD)
A <- rep(x = c("-", "+"), times = 8)
B <- rep(x = c("-", "+"), each = 2, times = 4)
C <- rep(x = c("-", "+"), each = 4, times = 2)
D <- rep(x = c("-", "+"), each = 8)
E <- c("+","+","-","-","+","+","-","-","-","-","+","+","-","-","+","+")
F <- c("-","-","+","+","+","+","-","-","+","+","-","-","-","-","+","+")
G <- c("+","-","+","-","-","+","-","+","+","-","+","-","-","+","-","+")
H <- c("-","+","-","+","+","-","+","-","+","-","+","-","-","+","-","+")
J <- c("+","-","-","+","+","-","-","+","+","-","-","+","+","-","-","+")
FTMOD <- c(7.52,4.18,1.57,2.12,1.87,2.12,7.12,1.57,1.21,0.50,1.87,3.54,1.87,2.12,0.50,0.50)
#data
hardata = data.frame(A,B,C,D,E,F,G,H,J,FTMOD)
coded=function(x) #a function to code variable x
{
ifelse(x=="+", 1, -1)
}
for (j in 1:9)
hardata[, j]=as.numeric(coded(hardata[, j]))
fraction.hardata=with(hardata, hardata[A * B * C * D * E * F * G * H * J== 1,])
#linear regression
hardata.lm <- lm(FTMOD ~ A*B*C*D*E*F*G*H*J, fraction.hardata)
summary(hardata.lm)
#alias
alias(hardata.lm)
qqnorm(aov(FTMOD ~ A*B*C*D*E*F*G*H*J*K, fraction.hardata), label = TRUE)#C, K, D
qqnorm(aov(FTMOD ~ A*B*C*D*E*F*G*H*J, fraction.hardata), label = TRUE)#C, K, D
