#chemical data from 6.7
rep1 = c(90,74,81,83,77,81,88,73)
rep2 = c(93,78,85,80,78,80,82,70)
rep3 = c(98,72,87,85,99,79,87,80)
rep4 = c(95,76,83,86,90,75,84,80)
chemical = data.frame(rep1,rep2,rep3,rep4)
#2^(4-1) with I=ABCD (Resolution IV)
fraction.chem=with(chemical, chemical[A * B * C * D == 1,])
#chemical data from 6.7
rep1 = c(90,74,81,83,77,81,88,73)
rep2 = c(93,78,85,80,78,80,82,70)
rep3 = c(98,72,87,85,99,79,87,80)
rep4 = c(95,76,83,86,90,75,84,80)
chemical = data.frame(rep1,rep2,rep3,rep4)
#2^(4-1) with I=ABCD (Resolution IV)
fraction.chem=with(chemical, chemical[rep1 * rep2 * rep3 * rep4 == 1,])
View(fraction.chem)
View(chemical)
#############################################
##     analysis of the one-half fraction    #
#############################################
#recode the data: x=1 at level +; X=-1 at level -
coded=function(x) #a function to code variable x
{
ifelse(x=="+", 1, -1)
}
#filtration rate data (eg. 8.1 page 325)
filtration=read.table("C:/Users/Emmanuel/Desktop/SPRING 2018/MATH 447/Chapter 8/filtration.txt", header = TRUE)
for (j in 1:4)
filtration[, j]=as.numeric(coded(filtration[, j]))
#2^(4-1) with I=ABCD (Resolution IV)
fraction=with(filtration, filtration[A * B * C * D == 1,])
View(filtration)
View(fraction)
#chemical data from 6.7
rep1 = c(90,74,81,83,77,81,88,73)
rep2 = c(93,78,85,80,78,80,82,70)
rep3 = c(98,72,87,85,99,79,87,80)
rep4 = c(95,76,83,86,90,75,84,80)
chemical = data.frame(rep1,rep2,rep3,rep4)
#2^(4-1) with I=ABCD (Resolution IV)
fraction.chem=with(chemical, chemical[rep1 * rep2 * rep3 * rep4 == 1,])
# declaring data
A <- rep(x = c("-", "+"), times = 8)
B <- rep(x = c("-", "+"), each = 2, times = 4)
C <- rep(x = c("-", "+"), each = 4, times = 2)
D <- c("-", "+", "+", "-", "+", "-", "-", "+", "-", "+", "+", "-", "+", "-", "-", "+")
E <- rep(x = c("-", "+"), each = 8)
FH1 <- c(7.78, 8.15, 7.5, 7.59, 7.54, 7.69, 7.56, 7.56, 7.5, 7.88, 7.5, 7.63, 7.32, 7.56, 7.18, 7.81)
FH2 <- c(7.78, 8.18, 7.56, 7.56, 8, 8.09, 7.52, 7.81, 7.25, 7.88, 7.56, 7.75, 7.44, 7.69, 7.18, 7.5)
FH3 <- c(7.81, 7.88, 7.5, 7.75, 7.88, 8.06, 7.44, 7.69, 7.12, 7.44, 7.5, 7.56, 7.44, 7.62, 7.25, 7.59)
# creating table
A <- c(A, A, A)
B <- c(B, B, B)
C <- c(C, C, C)
D <- c(D, D, D)
E <- c(E, E, E)
FH <- as.numeric(c(FH1, FH2, FH3))
spring <- data.frame(cbind(A, B, C, D, E, FH))
# defining coded
coded=function(x)
{
ifelse(x=="+", 1, -1)
}
# decoding data
for (j in 1:5)
spring[, j]=as.numeric(coded(spring[, j]))
# defining fraction
fraction <- with(spring, spring[A * B * C * D * E == 1,])
# linear regression
summary(lm(as.numeric(FH) ~ A * B * C * D * E, fraction))
# alias structure
alias(lm(as.numeric(FH) ~ A * B * C * D * E, fraction))
# half normal probability plot
qqnorm(aov(as.numeric(FH) ~ A * B * C * D * E, fraction), label = TRUE)
# loading libraries
library(gplots)
#chemical data from 6.7
rep1 = c(90,74,81,83,77,81,88,73)
rep2 = c(93,78,85,80,78,80,82,70)
rep3 = c(98,72,87,85,99,79,87,80)
rep4 = c(95,76,83,86,90,75,84,80)
chemical = data.frame(rep1,rep2,rep3,rep4)
#2^(4-1) with I=ABCD (Resolution IV)
fraction.chem=with(chemical, chemical[rep1 * rep2 * rep3 * rep4 == 1,])
# declaring data
A <- rep(x = c("-", "+"), times = 8)
B <- rep(x = c("-", "+"), each = 2, times = 4)
C <- rep(x = c("-", "+"), each = 4, times = 2)
D <- c("-", "+", "+", "-", "+", "-", "-", "+", "-", "+", "+", "-", "+", "-", "-", "+")
E <- rep(x = c("-", "+"), each = 8)
FH1 <- c(7.78, 8.15, 7.5, 7.59, 7.54, 7.69, 7.56, 7.56, 7.5, 7.88, 7.5, 7.63, 7.32, 7.56, 7.18, 7.81)
FH2 <- c(7.78, 8.18, 7.56, 7.56, 8, 8.09, 7.52, 7.81, 7.25, 7.88, 7.56, 7.75, 7.44, 7.69, 7.18, 7.5)
FH3 <- c(7.81, 7.88, 7.5, 7.75, 7.88, 8.06, 7.44, 7.69, 7.12, 7.44, 7.5, 7.56, 7.44, 7.62, 7.25, 7.59)
# creating table
A <- c(A, A, A)
B <- c(B, B, B)
C <- c(C, C, C)
D <- c(D, D, D)
E <- c(E, E, E)
FH <- as.numeric(c(FH1, FH2, FH3))
spring <- data.frame(cbind(A, B, C, D, E, FH))
# defining coded
coded=function(x)
{
ifelse(x=="+", 1, -1)
}
# decoding data
for (j in 1:5)
spring[, j]=as.numeric(coded(spring[, j]))
# defining fraction
fraction <- with(spring, spring[A * B * C * D * E == 1,])
# linear regression
summary(lm(as.numeric(FH) ~ A * B * C * D * E, fraction))
# alias structure
alias(lm(as.numeric(FH) ~ A * B * C * D * E, fraction))
View(spring)
yield = c(7,9,34,55,16,20,40,60,8,10,32,50,18,21,44,61,8,12,35,52,15,22,45,65,6,10,30,53,15,20,41,63)
A <- rep(x = c("-", "+"), times = 10)
B <- rep(x = c("-", "+"), each = 2, times = 5)
C <- rep(x = c("-", "+"), each = 4, times = 3)
experimento = data.frame(A,B,C, yield)
A <- rep(x = c("-", "+"), times = 15, c("-","+"))
experimento = data.frame(A,B,C,D,E yield)
experimento = data.frame(A,B,C,D,E,yield)
yield = c(7,9,34,55,16,20,40,60,8,10,32,50,18,21,44,61,8,12,35,52,15,22,45,65,6,10,30,53,15,20,41,63)
A <- rep(x = c("-", "+"), times = 16)
B <- rep(x = c("-", "+"), each = 2, times = 8)
C <- rep(x = c("-", "+"), each = 4, times = 4)
D <- rep(x = c("-", "+"), each = 8, times = 2)
E <- rep(x = c("-", "+"), each = 16)
experimento = data.frame(A,B,C,D,E,yield)
View(experimento)
View(filtration)
for (j in 1:5)
experimento[, j]=as.numeric(coded(experimento[, j]))
yield = c(7,9,34,55,16,20,40,60,8,10,32,50,18,21,44,61,8,12,35,52,15,22,45,65,6,10,30,53,15,20,41,63)
A <- rep(x = c("-", "+"), times = 16)
B <- rep(x = c("-", "+"), each = 2, times = 8)
C <- rep(x = c("-", "+"), each = 4, times = 4)
D <- rep(x = c("-", "+"), each = 8, times = 2)
E <- rep(x = c("-", "+"), each = 16)
experimento = data.frame(A,B,C,D,E,yield)
coded=function(x) #a function to code variable x
{
ifelse(x=="+", 1, -1)
}
for (j in 1:5)
experimento[, j]=as.numeric(coded(experimento[, j]))
fraction.experi=with(experimento, experimento[A * B * C * D * E== 1,])
#linear model
experi.lm = lm(yield ~ A*B*C*D*E, fraction.experi); summary(experi.lm)
alias(experi.lm)
#############################################
##     analysis of the one-half fraction    #
#############################################
#recode the data: x=1 at level +; X=-1 at level -
coded=function(x) #a function to code variable x
{
ifelse(x=="+", 1, -1)
}
#filtration rate data (eg. 8.1 page 325)
filtration=read.table("C:/Users/Emmanuel/Desktop/SPRING 2018/MATH 447/Chapter 8/filtration.txt", header = TRUE)
for (j in 1:4)
filtration[, j]=as.numeric(coded(filtration[, j]))
#2^(4-1) with I=ABCD (Resolution IV)
fraction=with(filtration, filtration[A * B * C * D == 1,])
summary(lm(Rate ~ A * B * C * D, fraction))
#Alias structure
alias(lm(Rate ~ A * B * C * D, fraction))
#Half-normal plot
library(gplots)
qqnorm(aov(Rate ~ A * B * C * D, fraction), label = TRUE)
qqnorm(aov(Rate ~ A * B * C * D, fraction), label = TRUE)
#chemical data from 6.7
rep1 = c(90,74,81,83,77,81,88,73,98,72,87,85,99,79,87,80)
#rep2 = c(93,78,85,80,78,80,82,70,95,76,83,86,90,75,84,80)
A <- rep(x = c("-", "+"), times = 8)
B <- rep(x = c("-", "+"), each = 2, times = 4)
C <- rep(x = c("-", "+"), each = 4, times = 2)
D <- rep(x = c("-", "+"), each = 8)
#data
chemical = data.frame(A,B,C,D,rep1)
yield = c(7,9,34,55,16,20,40,60,8,10,32,50,18,21,44,61,8,12,35,52,15,22,45,65,6,10,30,53,15,20,41,63)
A <- rep(x = c("-", "+"), times = 16)
B <- rep(x = c("-", "+"), each = 2, times = 8)
C <- rep(x = c("-", "+"), each = 4, times = 4)
D <- rep(x = c("-", "+"), each = 8, times = 2)
E <- rep(x = c("-", "+"), each = 16)
experimento = data.frame(A,B,C,D,E,yield)
coded=function(x) #a function to code variable x
{
ifelse(x=="+", 1, -1)
}
for (j in 1:5)
experimento[, j]=as.numeric(coded(experimento[, j]))
fraction.experi=with(experimento, experimento[A * B * C * D * E== 1,])
#linear model
experi.lm = lm(yield ~ A*B*C*D*E, fraction.experi); summary(experi.lm)
#alias
alias(experi.lm)
#normal probabiliy plot
qqnorm(aov(Rate ~ A * B * C * D * E, fraction.experi), label = TRUE)
#normal probabiliy plot
qqnorm(aov(yield ~ A * B * C * D * E, fraction.experi), label = TRUE)
#alias
alias(chem.lm)
#linear model
chem.lm = lm(rep1 ~ A*B*C*D, chemical); summary(chem.lm)
#alias
alias(chem.lm)
#linear model
chem.lm = lm(rep1 ~ A*B*C*D, fraction.chem); summary(chem.lm)
fraction.chem=with(chemical, chemical[A * B * C * D == 1,])
#linear model
chem.lm = lm(rep1 ~ A*B*C*D, fraction.chem); summary(chem.lm)
#chemical data from 6.7
rep1 = c(90,74,81,83,77,81,88,73,98,72,87,85,99,79,87,80)
#rep2 = c(93,78,85,80,78,80,82,70,95,76,83,86,90,75,84,80)
A <- rep(x = c("-", "+"), times = 8)
B <- rep(x = c("-", "+"), each = 2, times = 4)
C <- rep(x = c("-", "+"), each = 4, times = 2)
D <- rep(x = c("-", "+"), each = 8)
#data
chemical = data.frame(A,B,C,D,rep1)
coded=function(x) #a function to code variable x
{
ifelse(x=="+", 1, -1)
}
for (j in 1:4)
chemical[, j]=as.numeric(coded(chemical[, j]))
fraction.chem=with(chemical, chemical[A * B * C * D == 1,])
#linear model
chem.lm = lm(rep1 ~ A*B*C*D, fraction.chem); summary(chem.lm)
#alias
alias(chem.lm)
#normal probability plot
qqnorm(aov(rep1 ~ A * B * C * D, fraction.chem), label = TRUE)
